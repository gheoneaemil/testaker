/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockStaker, MockStakerInterface } from "../MockStaker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "stakingContractAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_staking",
    outputs: [
      {
        internalType: "contract Staking",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104ac3803806104ac8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600081519050610087816100f1565b92915050565b6000602082840312156100a3576100a26100ec565b5b60006100b184828501610078565b91505092915050565b60006100c5826100cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fa816100ba565b811461010557600080fd5b50565b610395806101176000396000f3fe6080604052600436106100435760003560e01c8063026b5ae51461004f57806312514bba1461007a5780632def6620146100a3578063a694fc3a146100ba5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100e3565b60405161007191906102c8565b60405180910390f35b34801561008657600080fd5b506100a1600480360381019061009c919061028c565b610107565b005b3480156100af57600080fd5b506100b8610171565b005b3480156100c657600080fd5b506100e160048036038101906100dc919061028c565b6101f3565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561016d573d6000803e3d6000fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632def66206040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101d957600080fd5b505af11580156101ed573d6000803e3d6000fd5b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a4b66f1826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561025b57600080fd5b505af115801561026f573d6000803e3d6000fd5b505050505050565b60008135905061028681610348565b92915050565b6000602082840312156102a2576102a1610343565b5b60006102b084828501610277565b91505092915050565b6102c28161030d565b82525050565b60006020820190506102dd60008301846102b9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103188261031f565b9050919050565b600061032a82610331565b9050919050565b600061033c826102e3565b9050919050565b600080fd5b61035181610303565b811461035c57600080fd5b5056fea2646970667358221220520df4039d41603ee35dd61b88015f056c052f6e375b6a427f86bd7e987e6c4664736f6c63430008070033";

export class MockStaker__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    stakingContractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockStaker> {
    return super.deploy(
      stakingContractAddr,
      overrides || {}
    ) as Promise<MockStaker>;
  }
  getDeployTransaction(
    stakingContractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(stakingContractAddr, overrides || {});
  }
  attach(address: string): MockStaker {
    return super.attach(address) as MockStaker;
  }
  connect(signer: Signer): MockStaker__factory {
    return super.connect(signer) as MockStaker__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStakerInterface {
    return new utils.Interface(_abi) as MockStakerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStaker {
    return new Contract(address, _abi, signerOrProvider) as MockStaker;
  }
}
